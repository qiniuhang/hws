diff --git a/src/http/modules/ngx_http_autoindex_module.c b/src/http/modules/ngx_http_autoindex_module.c
index d5915e1..a1bffe5 100644
--- a/src/http/modules/ngx_http_autoindex_module.c
+++ b/src/http/modules/ngx_http_autoindex_module.c
@@ -5,6 +5,7 @@
  */
 
 
+#include <fts.h>
 #include <ngx_config.h>
 #include <ngx_core.h>
 #include <ngx_http.h>
@@ -149,6 +150,28 @@ ngx_module_t  ngx_http_autoindex_module = {
 };
 
 
+static off_t
+fts_size(ngx_str_t *path)
+{
+    char *paths[] = {
+        path->data,
+        NULL
+    };
+    FTS *ftsp = fts_open(paths, FTS_LOGICAL, NULL);
+    FTSENT *ent;
+    off_t size = 0;
+
+    while (ent = fts_read(ftsp)) {
+        if (ent->fts_info & FTS_F) {
+            size += ent->fts_statp->st_size;
+        }
+    }
+
+    fts_close(ftsp);
+    return size;
+}
+
+
 static ngx_int_t
 ngx_http_autoindex_handler(ngx_http_request_t *r)
 {
@@ -379,7 +402,7 @@ ngx_http_autoindex_handler(ngx_http_request_t *r)
         entry->dir = ngx_de_is_dir(&dir);
         entry->file = ngx_de_is_file(&dir);
         entry->mtime = ngx_de_mtime(&dir);
-        entry->size = ngx_de_size(&dir);
+        entry->size = fts_size(&path);
     }
 
     if (ngx_close_dir(&dir) == NGX_ERROR) {
@@ -623,55 +646,44 @@ ngx_http_autoindex_html(ngx_http_request_t *r, ngx_array_t *entries)
         b->last = ngx_sprintf(b->last, "%17O", entry[i].mtime);
 
         if (alcf->exact_size) {
-            if (entry[i].dir) {
-                b->last = ngx_cpymem(b->last,  "                   -",
-                                     sizeof("                   -") - 1);
-            } else {
-                b->last = ngx_sprintf(b->last, "%20O", entry[i].size);
-            }
+            b->last = ngx_sprintf(b->last, "%20O", entry[i].size);
 
         } else {
-            if (entry[i].dir) {
-                b->last = ngx_cpymem(b->last,  "      -",
-                                     sizeof("      -") - 1);
-
-            } else {
-                length = entry[i].size;
-
-                if (length > 1024 * 1024 * 1024 - 1) {
-                    size = (ngx_int_t) (length / (1024 * 1024 * 1024));
-                    if ((length % (1024 * 1024 * 1024))
-                                                > (1024 * 1024 * 1024 / 2 - 1))
-                    {
-                        size++;
-                    }
-                    scale = 'G';
-
-                } else if (length > 1024 * 1024 - 1) {
-                    size = (ngx_int_t) (length / (1024 * 1024));
-                    if ((length % (1024 * 1024)) > (1024 * 1024 / 2 - 1)) {
-                        size++;
-                    }
-                    scale = 'M';
+            length = entry[i].size;
+
+            if (length > 1024 * 1024 * 1024 - 1) {
+                size = (ngx_int_t) (length / (1024 * 1024 * 1024));
+                if ((length % (1024 * 1024 * 1024))
+                                            > (1024 * 1024 * 1024 / 2 - 1))
+                {
+                    size++;
+                }
+                scale = 'G';
 
-                } else if (length > 9999) {
-                    size = (ngx_int_t) (length / 1024);
-                    if (length % 1024 > 511) {
-                        size++;
-                    }
-                    scale = 'K';
+            } else if (length > 1024 * 1024 - 1) {
+                size = (ngx_int_t) (length / (1024 * 1024));
+                if ((length % (1024 * 1024)) > (1024 * 1024 / 2 - 1)) {
+                    size++;
+                }
+                scale = 'M';
 
-                } else {
-                    size = (ngx_int_t) length;
-                    scale = '\0';
+            } else if (length > 9999) {
+                size = (ngx_int_t) (length / 1024);
+                if (length % 1024 > 511) {
+                    size++;
                 }
+                scale = 'K';
 
-                if (scale) {
-                    b->last = ngx_sprintf(b->last, "%6i%c", size, scale);
+            } else {
+                size = (ngx_int_t) length;
+                scale = '\0';
+            }
 
-                } else {
-                    b->last = ngx_sprintf(b->last, " %6i", size);
-                }
+            if (scale) {
+                b->last = ngx_sprintf(b->last, "%6i%c", size, scale);
+
+            } else {
+                b->last = ngx_sprintf(b->last, " %6i", size);
             }
         }
 
@@ -714,9 +726,7 @@ ngx_http_autoindex_json(ngx_http_request_t *r, ngx_array_t *entries,
             + sizeof(", \"type\":\"directory\"") - 1
             + sizeof(", \"mtime\":\"Wed, 31 Dec 1986 10:00:00 GMT\"") - 1;
 
-        if (entry[i].file) {
-            len += sizeof(", \"size\":") - 1 + NGX_OFF_T_LEN;
-        }
+        len += sizeof(", \"size\":") - 1 + NGX_OFF_T_LEN;
     }
 
     b = ngx_create_temp_buf(r->pool, len);
@@ -765,12 +775,9 @@ ngx_http_autoindex_json(ngx_http_request_t *r, ngx_array_t *entries,
 
         b->last = ngx_sprintf(b->last, "%O", entry[i].mtime);
 
-        if (entry[i].file) {
-            b->last = ngx_cpymem(b->last, ", \"size\":",
-                                 sizeof(", \"size\":") - 1);
-            b->last = ngx_sprintf(b->last, "%O", entry[i].size);
-
-        }
+        b->last = ngx_cpymem(b->last, ", \"size\":",
+                             sizeof(", \"size\":") - 1);
+        b->last = ngx_sprintf(b->last, "%O", entry[i].size);
 
         b->last = ngx_cpymem(b->last, " },", sizeof(" },") - 1);
     }
@@ -854,9 +861,7 @@ ngx_http_autoindex_xml(ngx_http_request_t *r, ngx_array_t *entries)
             + entry[i].name.len + entry[i].escape
             + sizeof(" mtime=\"1986-12-31T10:00:00Z\"") - 1;
 
-        if (entry[i].file) {
-            len += sizeof(" size=\"\"") - 1 + NGX_OFF_T_LEN;
-        }
+        len += sizeof(" size=\"\"") - 1 + NGX_OFF_T_LEN;
     }
 
     b = ngx_create_temp_buf(r->pool, len);
@@ -885,11 +890,9 @@ ngx_http_autoindex_xml(ngx_http_request_t *r, ngx_array_t *entries)
 
         b->last = ngx_sprintf(b->last, "%O", entry[i].mtime);
 
-        if (entry[i].file) {
-            b->last = ngx_cpymem(b->last, "\" size=\"",
-                                 sizeof("\" size=\"") - 1);
-            b->last = ngx_sprintf(b->last, "%O", entry[i].size);
-        }
+        b->last = ngx_cpymem(b->last, "\" size=\"",
+                             sizeof("\" size=\"") - 1);
+        b->last = ngx_sprintf(b->last, "%O", entry[i].size);
 
         *b->last++ = '"'; *b->last++ = '>';
 
